var documenterSearchIndex = {"docs":
[{"location":"man/","page":"Manual","title":"Manual","text":"Documentation for QECC.","category":"page"},{"location":"man/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"man/#QECC.AbstractCECC","page":"Manual","title":"QECC.AbstractCECC","text":"AbstractCECC <: AbstractECC\n\nAbstract type for classical error correction code.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.AbstractCSSCode","page":"Manual","title":"QECC.AbstractCSSCode","text":"AbstractCSSCode <: AbstractQECC\n\nAbstract type for Calderbank-Shor-Steane (CSS) code.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.AbstractECC","page":"Manual","title":"QECC.AbstractECC","text":"AbstractECC\n\nAbstract type for error correction code.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.AbstractQECC","page":"Manual","title":"QECC.AbstractQECC","text":"AbstractQECC <: AbstractECC\n\nAbstract type for quantum error correction code.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Bitflip3","page":"Manual","title":"QECC.Bitflip3","text":"Bitflip3 <: AbstractQECC\n\nBitflip3 is a three-qubit bit-flip code that corrects single-qubit bit-flip error and does not detect any phase-flip errors.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.CSS","page":"Manual","title":"QECC.CSS","text":"CSS <: AbstractCSSCode\nCSS(Hx, Hz)\n\nAn arbitrary CSS error correction code defined by its X and Z checks.\n\nFields\n\nHx: The parity check matrix of the X stabilizers.\nHz: The parity check matrix of the Z stabilizers.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Cleve8","page":"Manual","title":"QECC.Cleve8","text":"Cleve8 <: AbstractQECC\n\nA pedagogical example of a quantum error correcting [8,3] code used in (Cleve and Gottesman, 1997).\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Perfect5","page":"Manual","title":"QECC.Perfect5","text":"Perfect5 <: AbstractQECC\n\nPerfect5 code (Lafiamme et al., 1996) is the smallest qubit stabilizer code to correct a single-qubit error.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Phaseflip3","page":"Manual","title":"QECC.Phaseflip3","text":"Phaseflip3 <: AbstractQECC\n\nPhaseflip3 is a three-qubit phase-flip code that corrects single-qubit phase-flip error and does not detect any bit-flip errors.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.RepCode","page":"Manual","title":"QECC.RepCode","text":"RepCode <: AbstractCECC\nRepCode(n)\n\nRepetition code is a classical error correction code that repeats the same bit n times.\n\nFields\n\nn: The number of times to repeat the bit.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Shor9","page":"Manual","title":"QECC.Shor9","text":"Shor9 <: AbstractCSSCode\n\nShor9 code (Shor, 1995)is a nine-qubit CSS code that is the first quantum error-correcting code.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Steane7","page":"Manual","title":"QECC.Steane7","text":"Steane7 <: AbstractCSSCode\n\nSteane code (Steane, 1996).\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Surface","page":"Manual","title":"QECC.Surface","text":"Surface <: AbstractCSSCode\nSurface(dx, dz)\n\nThe planar surface code refers to the code (Kitaev, 2003) in a 2D lattice with open boundaries. Illustration of a 3×2 surface code, where qubits are located on the edges:\n\n|---1--(Z)--2---|---3---|\n|  (X)  7       8       o\n|---4---|---5---|---6---|\n|       o       o       o\n|       |       |       |\n\nThe surface code has open boundary conditions, unlike the toric code. To this end, we remove qubits (denoted by \"o\") and parity checks on the right and bottom sides.\n\nMore information can be seen in (Fowler et al., 2012).\n\nFields\n\ndx: The number of qubits in the x direction.\ndz: The number of qubits in the z direction.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.Toric","page":"Manual","title":"QECC.Toric","text":"Toric <: AbstractCSSCode\nToric(dx, dz)\n\nThe Toric code (Kitaev, 2003). Illustration of a 2x2 toric code, where qubits are located on the edges:\n\n|--1-(Z)-2--|\n| (X) 5     6\n|--3--|--4--|\n|     7     8\n|     |     |\n\nIt is important to note that the toric code has periodic boundary conditions, which means that the top and bottom sides are essentially glued together, as are the left and right sides.\n\nFields\n\ndx: The number of qubits in the x direction.\ndz: The number of qubits in the z direction.\n\n\n\n\n\n","category":"type"},{"location":"man/#QECC.code_k","page":"Manual","title":"QECC.code_k","text":"code_k(c::AbstractECC)\n\nThe number of logical qubits in a error correction code.\n\n\n\n\n\n","category":"function"},{"location":"man/#QECC.code_n-Tuple{QECC.AbstractQECC}","page":"Manual","title":"QECC.code_n","text":"code_n(c::AbstractECC)\n\nThe number of physical qubits in a error correction code.\n\n\n\n\n\n","category":"method"},{"location":"man/#QECC.code_s-Tuple{QECC.AbstractECC}","page":"Manual","title":"QECC.code_s","text":"code_s(c::AbstractECC)\n\nThe number of stabilizers in a error correction code. They might not be all linearly independent, thus code_s >= code_n-code_k. For the number of linearly independent checks you can use LinearAlgebra.rank.\n\n\n\n\n\n","category":"method"},{"location":"man/#QECC.distance","page":"Manual","title":"QECC.distance","text":"distance(c::AbstractECC)\n\nThe code distance of a error correction code.\n\n\n\n\n\n","category":"function"},{"location":"man/#QECC.hgp-Tuple{AbstractMatrix{Bool}, AbstractMatrix{Bool}}","page":"Manual","title":"QECC.hgp","text":"hgp(h₁::AbstractMatrix{Bool}, h₂::AbstractMatrix{Bool})\n\nHypergraph product of two classical codes.\n\n\n\n\n\n","category":"method"},{"location":"man/#QECC.parity_matrix","page":"Manual","title":"QECC.parity_matrix","text":"parity_matrix(c::AbstractECC)\n\nThe parity check matrix of a error correction code.\n\n\n\n\n\n","category":"function"},{"location":"man/#QECC.parity_matrix_x","page":"Manual","title":"QECC.parity_matrix_x","text":"parity_matrix_x(c::AbstractCSSCode)\n\nParity check boolean matrix of a code (only the X entries in the tableau, i.e. the checks for Z errors). Only CSS codes have this method.\n\n\n\n\n\n","category":"function"},{"location":"man/#QECC.parity_matrix_z","page":"Manual","title":"QECC.parity_matrix_z","text":"parity_matrix_z(c::AbstractCSSCode)\n\nParity check boolean matrix of a code (only the Z entries in the tableau, i.e. the checks for X errors). Only CSS codes have this method.\n\n\n\n\n\n","category":"function"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Cleve, R. and Gottesman, D. (1997). Efficient computations of encodings for quantum error correction. Physical Review A 56, 76.\n\n\n\nFowler, A. G.; Mariantoni, M.; Martinis, J. M. and Cleland, A. N. (2012). Surface codes: Towards practical large-scale quantum computation. Physical Review A 86, 032324.\n\n\n\nKitaev, A. (2003). Fault-tolerant quantum computation by anyons. Annals of Physics 303, 2–30.\n\n\n\nLafiamme, R.; Miquel, C.; Paz, J. P. and Zurek, W. H. (1996). Perfect quantum error correction code. Physical Review Letters 77, 198–201.\n\n\n\nShor, P. W. (1995). Scheme for reducing decoherence in quantum computer memory. Physical review A 52, R2493.\n\n\n\nSteane, A. M. (1996). Error correcting codes in quantum theory. Physical Review Letters 77, 793.\n\n\n\n","category":"page"},{"location":"generated/interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"In this example, we will show how to use the basic interfaces of the package.","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"using QECC","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"Create a perfect five-qubit code","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"p5 = Perfect5()","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"Get the parity check matrix","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"parity_matrix(p5)","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"Get the number of qubits","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"code_n(p5)","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"Get the number of stabilizer generators","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"code_s(p5)","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"Get the distance of the code","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"distance(p5)","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"For a CSS code, we can also get the parity check matrices for X and Z stabilizers with parity_matrix_x and parity_matrix_z","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"s9 = Shor9()\nparity_matrix_x(s9)","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"","category":"page"},{"location":"generated/interface/","page":"Interface","title":"Interface","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#QECC","page":"Home","title":"QECC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A repository for quantum error correction (QEC) codes.","category":"page"},{"location":"#Quantum-Code-list","page":"Home","title":"Quantum Code list","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Code name Struct\nPerfect 5-qubit code Perfect5\nShor code Shor9\nBit-flip Bitflip3\nPhase-flip Phaseflip3\nCleve code Cleve8\nSteane code Steane7\nToric code Toric\nSurface code Surface\nGeneral CSS code CSS","category":"page"},{"location":"#Classical-Code-list","page":"Home","title":"Classical Code list","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Code name Struct\nRepetition Code RepCode","category":"page"}]
}
